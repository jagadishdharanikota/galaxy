/* eslint spaced-comment: ["error", "always", { "exceptions": ["*"] }] */
/*********************************************************************************************
 * Designer module to design UI for View component
 *
 * @author: Jagadish Dharanikota
 *********************************************************************************************/

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { withAll, withActions } from '../../../HOCs';
import Header from '../DesignerHeader';
import CtrlsToolbar from './CtrlsToolbar';

import Tabs from '../../containers/Tabs';
import View from '../../containers/View';
import Input from '../../controls/Input';

import componentsMap from '../../../ComponentsMap';
import { APP_PROPS, UI_MODE_DESIGN, DOM_ATTRIBUTES, OPERATION } from '../../../constants';

import './styles.css';

const DESIGNER_AREA_CLASS = 'designer-area';
const INSERTION_POINT = 'insertion-point';
const GAP_BETWEEN_ROWS = 4;

class ViewDesigner extends Component {
  constructor(props) {
    super(props);
    this.state = {
      showConfig: false,
      propsContext: null,
    };

    this.currentFocusedElement = null;
    this.blinkComponent = null;
    this.componentConfigState = null;
    this.actions = this.props.actions;
    this.metadata = this.props[APP_PROPS.METADATA];
    this.metaPropContext = [...this.props.propsContext, APP_PROPS.METADATA];
    this.buildAreaID = this.metadata._id;
    this.blinkerID = `${this.buildAreaID}-${INSERTION_POINT}`;
  }

  componentDidMount() {
    const buildAreaElement = document.getElementById(this.buildAreaID);
    if (buildAreaElement) {
      buildAreaElement.appendChild(this.createBlinkElement());
    }
  }

  componentDidUpdate() {
    const insertionElement = document.getElementById(this.blinkerID);
    if (insertionElement && insertionElement.parentElement) {
      insertionElement.parentElement.appendChild(insertionElement);
    } else if (!insertionElement) {
      const buildAreaElement = document.getElementById(this.buildAreaID);
      if (buildAreaElement) {
        buildAreaElement.appendChild(this.createBlinkElement());
      }
    }
  }

  componentWillUnmount() {
    this.blinkComponent = null;
  }

  /**
   * Handles mouse click on the designer area. Does following actions based on the click target
   * 1. If the target element is layout then blinker is inserted.
   * 2. If the target is a control its design time configuration is shown.
   * @param  {Event} event
   */
  handleDesignerAreaClick = (event) => {
    let { target } = event;

    // Finding the right target element having data-category attribute by traversing the tree up
    while (target && !target.getAttribute(DOM_ATTRIBUTES.DATA_CATEGORY)) {
      target = target.parentElement;
    }

    if (this.currentFocusedElement) {
      const highlistedElement = this.currentFocusedElement.closest(
        `div[${DOM_ATTRIBUTES.DATA_ROW}]`
      );
      if (highlistedElement) {
        const { className } = highlistedElement;
        highlistedElement.className = className.replace(' border border-primary', '');
      } else {
        console.info("Couldn't find nearest div[data-row] element");
      }
    }

    if (target) {
      this.currentFocusedElement = target;
      const category = target.getAttribute(DOM_ATTRIBUTES.DATA_CATEGORY);
      const path = target.parentElement.getAttribute(DOM_ATTRIBUTES.DATA_ROW);
      const modelPath = this.getPath(path);

      modelPath.push(APP_PROPS.CONFIG);
      switch (category) {
        case APP_PROPS.LAYOUT:
          this.insertBlinkAtClickedLocation(event);
          break;
        case APP_PROPS.CONTROL:
          this.showConfig(modelPath);
          break;
        default:
          this.insertBlinkAtClickedLocation(event);
      }
      const highlistedElement = this.currentFocusedElement.closest(
        `div[${DOM_ATTRIBUTES.DATA_ROW}]`
      );
      highlistedElement.className += ' border border-primary';
    } else {
      this.insertBlinkAtClickedLocation(event);
    }
  };

  /**
   * Insert the selected control from the controls toolbar
   * @param  {Event} event
   */
  insertItem = (event) => {
    const { target } = event;
    const info = this.getItemInfo(target);

    if (!info) {
      console.info("Couldn't get information where the item should be inserted");
      return;
    }

    if (this.blinkComponent) {
      const { operation, path } = this.getInsertionInfo(this.blinkComponent);
      const newPath = this.getPath(path);
      // Old Changes
      // this.actions.addDesignItem({path: newPath, operation, componentState: this.getComponentState(info)});
      this.actions.addDesignItem({
        path: [...this.metaPropContext, APP_PROPS.CONFIG, ...newPath],
        operation,
        componentState: this.getComponentState(info),
      });
    }
  };

  /**
   * Deletes current focused item from the design time
   */
  deleteItem = () => {
    if (this.currentFocusedElement) {
      let path = this.currentFocusedElement.getAttribute(DOM_ATTRIBUTES.DATA_ROW);
      if (!path) {
        path = this.currentFocusedElement.parentElement.getAttribute(DOM_ATTRIBUTES.DATA_ROW);
      }
      const newPath = this.getPath(path);
      // this.actions.removeDesignItem({path: newPath, operation: OPERATION.REMOVE});
      this.actions.removeDesignItem({
        path: [...this.metaPropContext, APP_PROPS.CONFIG, ...newPath],
        operation: OPERATION.REMOVE,
      });
    }
  };

  /**
   * Deletes current focused item from the design time
   */
  moveItem = (event) => {
    let { target } = event;
    target = target.closest(`button[${DOM_ATTRIBUTES.DATA_DIRECTION}]`);
    const direction = target.getAttribute(DOM_ATTRIBUTES.DATA_DIRECTION);
    if (
      this.currentFocusedElement &&
      APP_PROPS.LAYOUT === this.currentFocusedElement.getAttribute(DOM_ATTRIBUTES.DATA_CATEGORY)
    ) {
      const path = this.currentFocusedElement.getAttribute(DOM_ATTRIBUTES.DATA_ROW);
      const newPath = this.getPath(path);

      switch (direction) {
        case OPERATION.MOVE_UP:
          this.actions.moveDesignItem({
            path: [...this.metaPropContext, APP_PROPS.CONFIG, ...newPath],
            operation: OPERATION.MOVE_UP,
          });
          break;
        case OPERATION.MOVE_DOWN:
          this.actions.moveDesignItem({
            path: [...this.metaPropContext, APP_PROPS.CONFIG, ...newPath],
            operation: OPERATION.MOVE_DOWN,
          });
          break;
        default:
          console.info('Not matching direction found');
      }
    }
  };

  /**
   * Inserts blinking element in the clicked location. Blink is inserted at the nearest appropriate position
   * @param  {Event} event
   */
  insertBlinkAtClickedLocation(event) {
    const { target, clientX, clientY } = event;
    const { className, parentElement } = target;
    const isTargetDesignerArea = className.indexOf(DESIGNER_AREA_CLASS) > -1;
    const isTargetALayoutColumn =
      className.indexOf('col-') > -1 &&
      parentElement &&
      parentElement.getAttribute(DOM_ATTRIBUTES.DATA_CATEGORY) === APP_PROPS.LAYOUT;
    /*
		Mouse click inside DESIGNER_AREA_CLASS element but could be between gap present in existing rows
		______________________________________________________________
		______________________________________________________________ ---> Row1
							-> Mouse click location
		______________________________________________________________
		______________________________________________________________ ---> Row2
		*/

    if (isTargetDesignerArea || isTargetALayoutColumn) {
      const children = [...target.children];
      let gapBetweenRows = GAP_BETWEEN_ROWS;
      for (let index = 0; index < children.length; index += 1) {
        const currentElement = children[index];
        const currentBounds = currentElement.getBoundingClientRect();

        if (index + 1 < children.length) {
          const nextElement = children[index + 1];
          const nextBounds = nextElement.getBoundingClientRect();
          gapBetweenRows = nextBounds.y - (currentBounds.y + currentBounds.height);
        }

        /* Checking if the mouse click coordinates is closely below this element.
				   Different is checked for 4 as the margin gap between row's is 4.
				   // Useful API: elementFromPoints
				*/
        if (
          Math.abs(clientY - (currentBounds.y + currentBounds.height)) <= gapBetweenRows &&
          clientX > currentBounds.x &&
          clientX <= currentBounds.x + currentBounds.width
        ) {
          currentElement.insertAdjacentElement('afterend', this.blinkComponent);
          return;
        }
      }

      /* If none of the elements matched even after all elements are done, append the blink element at end. Click might be at the end. */
      target.append(this.blinkComponent);
    }
  }

  async showConfig(path) {
    const { httpClient } = this.props;
    const component = this.currentFocusedElement.getAttribute('data-component');
    const { designerView } = componentsMap[component];
    const { data: response } = await httpClient({ url: `views/${designerView}`, method: 'GET' });

    this.actions.addContextData({
      contextPath: [...this.props.propsContext, APP_PROPS.DATA],
      data: response.data,
    });

    this.componentConfigState = {
      ...response[APP_PROPS.METADATA],
      propsContext: [...this.props.propsContext, APP_PROPS.METADATA, APP_PROPS.CONFIG, ...path],
    };

    this.setState({ showConfig: true, propsContext: path.join('.') });
  }

  hideConfig = () => {
    this.setState({ showConfig: false, propsContext: null });
    this.componentConfigState = null;
  };

  saveConfiguration = () => {
    // const {_id, type, category, config, dataSource} = this.props[APP_PROPS.METADATA];
    this.actions.save({
      routeName: 'views',
      key: this.buildAreaID,
      postData: this.props[APP_PROPS.METADATA],
    });
  };

  /**
   * Get the state of the selected component
   * @param  {Object} info - Infomation of the selected component
   */
  getComponentState(info) {
    const componentState = {
      component: info.identifier,
      category: info.category,
      key: Date.now().toString(),
    };

    switch (info.category) {
      case APP_PROPS.LAYOUT:
        const columns = parseInt(info.identifier.split('*')[1], 10);
        // Creates an array filled with object {children: []}
        componentState.columns = Array(columns).fill({
          [APP_PROPS.CHILDREN]: [],
        });
        break;
      case APP_PROPS.CONTROL:
        componentState[APP_PROPS.CONFIG] = {
          label: info.identifier,
          propertyReference: '',
          position: 'vertical',
        };
        break;
      default:
        console.info("Didn't match with any category to return the state");
    }
    return componentState;
  }

  /**
   * Returns the info of the clicked item on the the designer
   * @param  {} target
   */
  getItemInfo(target) {
    if (!target) {
      console.info('Target is not available');
      return null;
    }

    const category = target.getAttribute(DOM_ATTRIBUTES.DATA_CATEGORY);
    const identifier = target.getAttribute(DOM_ATTRIBUTES.DATA_IDENTIFIER);
    return category && identifier ? { category, identifier } : this.getItemInfo(target.parent);
  }

  /**
   * Determines the location where the new element should be create and return the insertion info with respect to blinker
   * @param  {DOMElement} insertionElement
   * @return {Object} Returns object with operation and path
   *  operation specifies the relative position where the new control should be insert with respect to blinker element
   * 	path is the data path to update the model
   */
  getInsertionInfo(insertionElement) {
    // Destruction the previousSibling and nextSibling of current DOM element
    const { parentElement, previousSibling, nextSibling } = insertionElement;

    if (!parentElement) {
      return null;
    }

    const { className, children } = parentElement;
    const targetAreaHasSiblings =
      (className.indexOf(DESIGNER_AREA_CLASS) > -1 || className.indexOf('col-') > -1) &&
      children.length > 1 &&
      previousSibling;

    // Drop location can be betweeen 2 rows or at the end below a row
    if (targetAreaHasSiblings) {
      if (previousSibling) {
        return {
          operation: OPERATION.SIBLING_BELOW,
          path: previousSibling.getAttribute(DOM_ATTRIBUTES.DATA_ROW),
        };
      } else if (nextSibling) {
        return {
          operation: OPERATION.SIBLING_ABOVE,
          path: nextSibling.getAttribute(DOM_ATTRIBUTES.DATA_ROW),
        };
      }
    } else if (parentElement.getAttribute(DOM_ATTRIBUTES.DATA_COLUMN)) {
      // Drop location is inside column which has class like col-md-* / col-sm-* etc
      return {
        operation: OPERATION.CHILD,
        path: parentElement.getAttribute(DOM_ATTRIBUTES.DATA_COLUMN),
      };
    }

    // This is the first item that is added to designer area
    return {
      operation: OPERATION.SIBLING_BELOW,
      path: '0',
    };
  }

  /**
   * Generates path
   * @param  {Array} path
   */
  getPath(path) {
    const newPath = [];
    if (path) {
      path.split('.').forEach((item, index) => {
        const property = index % 2 === 0 ? APP_PROPS.CHILDREN : APP_PROPS.COLUMNS;
        // Pushing multiple items to array
        newPath.push(property, parseInt(item, 10) - 1);
      });
    }
    return newPath;
  }

  /**
   * Creates the design time UI for the given model
   * @param  {Object} designState
   */
  buildDesignMarkup(designState) {
    if (designState) {
      return React.createElement(View, { ...designState, mode: UI_MODE_DESIGN });
    }
    return '';
  }

  /**
   * Creates blinker element
   */
  createBlinkElement() {
    this.blinkComponent = document.createElement('div');
    this.blinkComponent.id = this.blinkerID;
    this.blinkComponent.className = 'blinker m-2';
    return this.blinkComponent;
  }

  render() {
    const dataSourceProps = {
      dataSource: this.metadata.dataSource,
      propsContext: this.metaPropContext,
    };
    this.metadata = this.props[APP_PROPS.METADATA];

    const DesignerComponent = (
      <>
        <div className="row m-2 sticky-top" style={{ top: '56px' }}>
          <div className="col-sm-10">
            <div className="btn-toolbar mr-1" role="toolbar">
              <div className="btn-group" role="group" aria-label="toolbar controls">
                <button
                  type="button"
                  className="btn btn-light"
                  title="Delete"
                  onClick={this.deleteItem}
                >
                  <i className="fa fa-trash-o" aria-hidden="true" />
                </button>
                <button
                  type="button"
                  className="btn btn-light"
                  title="Move up"
                  data-direction={OPERATION.MOVE_UP}
                  onClick={this.moveItem}
                >
                  <i className="fa fa-arrow-up" aria-hidden="true" />
                </button>
                <button
                  type="button"
                  className="btn btn-light"
                  title="Move down"
                  data-direction={OPERATION.MOVE_DOWN}
                  onClick={this.moveItem}
                >
                  <i className="fa fa-arrow-down" aria-hidden="true" />
                </button>
              </div>
            </div>
            <CtrlsToolbar onSelect={this.insertItem} />
          </div>
          <div className="col-sm-2">
            <input className="form-control" type="text" placeholder="Search gadgets" />
          </div>
        </div>
        <div className="row border-top no-gutters">
          <div className="col-sm-9">
            <div
              id={this.buildAreaID}
              className={`${DESIGNER_AREA_CLASS} h-100`}
              aria-label="designer"
              role="presentation"
              onClick={this.handleDesignerAreaClick}
            >
              {this.buildDesignMarkup(this.metadata)}
            </div>
          </div>
          <div className="col-sm-3 bg-light p-2 " data-path={this.state.propsContext}>
            <div className="container-fluid border-bottom">
              <h6>Configuration</h6>
            </div>
            <View {...this.componentConfigState} />
          </div>
        </div>
      </>
    );

    this.tabs = [
      {
        title: 'Designer',
        component: DesignerComponent,
      },
      {
        title: 'Data Source',
        component: <DataSource {...dataSourceProps} />,
      },
    ];

    return (
      <div className="view-designer container-fluid">
        <Header
          name={this.props.name}
          description={this.props.description}
          save={this.saveConfiguration}
        />
        <main>
          <Tabs tabs={this.tabs} />
        </main>
      </div>
    );
  }
}

ViewDesigner.propTypes = {
  name: PropTypes.string.isRequired,
  description: PropTypes.string.isRequired,
  propsContext: PropTypes.instanceOf(Array).isRequired,
  dataSource: PropTypes.arrayOf(
    PropTypes.shape({
      key: PropTypes.string.isRequired,
      label: PropTypes.string.isRequired,
    })
  ).isRequired,
  actions: PropTypes.instanceOf(Array).isRequired,
  httpClient: PropTypes.func.isRequired,
};

const DataSource = React.memo(
  (props) => {
    const { dataSource, propsContext } = props;

    const getDataSourceItems = () => {
      if (dataSource && Array.isArray(dataSource)) {
        return dataSource.map((item, index) => (
          <div key={index} className="row">
            <div className="col-sm-6">
              {React.createElement(withAll(Input), {
                propsContext: [...propsContext, 'dataSource', '0'],
                [APP_PROPS.CONFIG]: { type: 'text', propertyReference: '.name' },
              })}
            </div>
            <div className="col-sm-6">
              {React.createElement(withAll(Input), {
                propsContext: [...propsContext, 'dataSource', '0'],
                [APP_PROPS.CONFIG]: { type: 'text', propertyReference: '.key' },
              })}
            </div>
          </div>
        ));
      }
      return '';
    };

    return (
      <>
        <div className="row">
          <div className="col-sm-6">Name</div>
          <div className="col-sm-6">Key</div>
        </div>
        {getDataSourceItems()}
      </>
    );
  },
  (prevProps, nextProps) => prevProps !== nextProps
);

DataSource.propTypes = {
  propsContext: PropTypes.instanceOf(Array).isRequired,
  dataSource: PropTypes.arrayOf(
    PropTypes.shape({
      key: PropTypes.string.isRequired,
      label: PropTypes.string.isRequired,
    })
  ).isRequired,
};

// Exporting ViewDesigner for jest unit tests as connected components are complex to test
export { ViewDesigner };
export default withActions(ViewDesigner);
